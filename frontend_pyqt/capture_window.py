"""
Janela de exibi√ß√£o de capturas de tela.

Exibe uma ou mais regi√µes capturadas em layout grid/vertical,
com op√ß√µes de configura√ß√£o e redimensionamento proporcional.
"""

import logging
from typing import List
import csv
from pathlib import Path

from PyQt6.QtCore import Qt, QRect
from PyQt6.QtGui import QPixmap, QPainter, QIcon
from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
                           QScrollArea, QPushButton, QApplication)

try:
    from capture_region_config_dialog import CaptureRegionConfigDialog
except ImportError:
    from .capture_region_config_dialog import CaptureRegionConfigDialog


class CaptureDisplayWidget(QLabel):
    """
    Widget que exibe uma captura de tela espec√≠fica.
    
    Mant√©m propor√ß√£o original e permite redimensionamento.
    """
    
    def __init__(self, region, parent=None):
        super().__init__(parent)
        self.region = region
        self.original_pixmap = None
        self.setMinimumSize(100, 100)
        self.setStyleSheet("border: 1px solid gray;")
        self.setAlignment(Qt.AlignmentFlag.AlignCenter)  # Atualizado em: 2024-12-28 ‚Äî PyQt6 moveu constantes para AlignmentFlag
        self.setText(f"Regi√£o: {region.display_id}\n({region.x1},{region.y1})-({region.x2},{region.y2})")

    def set_capture(self, pixmap: QPixmap):
        """
        Define a captura a ser exibida.
        
        Args:
            pixmap: Imagem capturada
        """
        self.original_pixmap = pixmap
        self._update_display()

    def _update_display(self):
        """Atualiza a exibi√ß√£o com o pixmap redimensionado."""
        if not self.original_pixmap:
            return
            
        # Redimensiona mantendo propor√ß√£o
        scaled_pixmap = self.original_pixmap.scaled(
            self.size(), 
            Qt.AspectRatioMode.KeepAspectRatio,  # Atualizado em: 2024-12-28 ‚Äî PyQt6 moveu constantes para AspectRatioMode
            Qt.TransformationMode.SmoothTransformation  # Atualizado em: 2024-12-28 ‚Äî PyQt6 moveu constantes para TransformationMode
        )
        self.setPixmap(scaled_pixmap)

    def resizeEvent(self, event):
        """Redimensiona o conte√∫do quando a janela √© redimensionada."""
        super().resizeEvent(event)
        self._update_display()


class CaptureWindow(QWidget):
    """
    Janela principal de exibi√ß√£o de capturas.
    
    Exibe m√∫ltiplas regi√µes de captura em layout grid,
    com op√ß√µes de configura√ß√£o e controle.
    Layout otimizado para maximizar espa√ßo de exibi√ß√£o do conte√∫do capturado.
    """
    
    def __init__(self, window_name: str, regions: List, manager, parent=None):
        super().__init__(parent)
        self.window_name = window_name
        self.regions = regions
        self.manager = manager
        self.logger = logging.getLogger(__name__)
        
        # Widgets de exibi√ß√£o
        self.display_widgets: List[CaptureDisplayWidget] = []
        
        self._setup_ui()
        self._setup_window_properties()

    def _setup_ui(self):
        """Configura a interface da janela otimizada para maximizar √°rea de captura."""
        # Layout principal sem margens para maximizar espa√ßo
        layout = QVBoxLayout(self)
        layout.setContentsMargins(2, 2, 2, 2)  # Margens m√≠nimas
        layout.setSpacing(2)  # Espa√ßamento m√≠nimo entre elementos
        
        # Barra de controle compacta e minimalista
        control_layout = QHBoxLayout()
        control_layout.setContentsMargins(2, 2, 2, 2)  # Margens m√≠nimas
        control_layout.setSpacing(2)  # Espa√ßamento m√≠nimo entre bot√µes
        
        # Bot√µes com tamanho ainda mais compacto
        button_size = 24  # Reduzido de 30 para 24 pixels
        
        # Bot√£o de configura√ß√£o
        config_btn = QPushButton("‚öô")
        config_btn.setFixedSize(button_size, button_size)
        config_btn.setToolTip("Configura√ß√µes")
        config_btn.clicked.connect(self._show_config_dialog)
        config_btn.setStyleSheet("""
            QPushButton {
                border: 1px solid #666;
                border-radius: 3px;
                background-color: #f0f0f0;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #e0e0e0;
            }
            QPushButton:pressed {
                background-color: #d0d0d0;
            }
        """)
        
        # Bot√£o sempre no topo
        self.always_on_top_btn = QPushButton("üìå")
        self.always_on_top_btn.setFixedSize(button_size, button_size)
        self.always_on_top_btn.setToolTip("Sempre no topo")
        self.always_on_top_btn.setCheckable(True)
        self.always_on_top_btn.clicked.connect(self._toggle_always_on_top)
        self.always_on_top_btn.setStyleSheet("""
            QPushButton {
                border: 1px solid #666;
                border-radius: 3px;
                background-color: #f0f0f0;
                font-size: 10px;
            }
            QPushButton:hover {
                background-color: #e0e0e0;
            }
            QPushButton:checked {
                background-color: #4a90e2;
                color: white;
            }
        """)
        
        # Label compacto com nome da janela (opcional, pode ser removido para mais espa√ßo)
        window_label = QLabel(self.window_name)
        window_label.setStyleSheet("""
            QLabel {
                font-size: 10px;
                color: #666;
                font-weight: bold;
            }
        """)
        window_label.setMaximumHeight(16)  # Altura m√≠nima
        
        # Organiza controles de forma compacta
        control_layout.addWidget(config_btn)
        control_layout.addWidget(self.always_on_top_btn)
        control_layout.addWidget(window_label)
        control_layout.addStretch()  # Empurra bot√µes para a esquerda
        
        # √Årea de capturas otimizada para ocupar m√°ximo espa√ßo
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        
        # CORRIGIDO: Atualizado em: 2024-12-28 ‚Äî PyQt6 usa ScrollBarAlwaysOff em vez de ScrollBarNever
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)  # Scroll vertical apenas quando necess√°rio
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)  # Nunca exibe scroll horizontal
        scroll_area.setFrameStyle(0)  # Remove borda do scroll area
        
        captures_widget = QWidget()
        
        # Layout das capturas otimizado
        self.captures_layout = QVBoxLayout(captures_widget)
        self.captures_layout.setContentsMargins(0, 0, 0, 0)  # Remove margens completamente
        self.captures_layout.setSpacing(1)  # Espa√ßamento m√≠nimo entre capturas
        
        # Cria widgets de exibi√ß√£o para cada regi√£o
        for region in self.regions:
            display_widget = CaptureDisplayWidget(region)
            
            # Otimiza o widget de exibi√ß√£o para ocupar mais espa√ßo
            display_widget.setStyleSheet("""
                QLabel {
                    border: 1px solid #ddd;
                    background-color: #fafafa;
                    margin: 0px;
                }
            """)
            display_widget.setMinimumSize(150, 100)  # Tamanho m√≠nimo maior para melhor visualiza√ß√£o
            
            self.display_widgets.append(display_widget)
            self.captures_layout.addWidget(display_widget)
        
        scroll_area.setWidget(captures_widget)
        
        # Adiciona elementos ao layout principal priorizando espa√ßo de captura
        layout.addLayout(control_layout)  # Controles ocupam espa√ßo m√≠nimo
        layout.addWidget(scroll_area, 1)  # √Årea de captura recebe todo o espa√ßo restante (stretch factor = 1)

    def _setup_window_properties(self):
        """Configura propriedades da janela otimizada para exibi√ß√£o de conte√∫do."""
        self.setWindowTitle(f"üìπ {self.window_name}")  # T√≠tulo mais compacto
        
        # Carrega posi√ß√£o da janela do CSV se dispon√≠vel
        self._load_window_position()
        
        # Define √≠cone se dispon√≠vel
        try:
            self.setWindowIcon(QIcon("üìπ"))  # Fallback para emoji
        except:
            pass
        
        # Otimiza√ß√µes de renderiza√ß√£o
        self.setAttribute(Qt.WidgetAttribute.WA_OpaquePaintEvent)  # Otimiza√ß√£o de pintura
        self.setAttribute(Qt.WidgetAttribute.WA_NoSystemBackground)  # Remove background sistema

    def _load_window_position(self):
        """
        Carrega a posi√ß√£o e tamanho da janela do arquivo config_capture_win_pos.csv.
        
        Se o nome da janela for encontrado no CSV, define a geometria da janela.
        Caso contr√°rio, usa valores padr√£o.
        """
        csv_path = Path("config_capture_win_pos.csv")
        
        if not csv_path.exists():
            # Arquivo n√£o existe, usa padr√£o
            self.resize(450, 350)
            return
        
        try:
            with open(csv_path, 'r', encoding='utf-8') as file:
                reader = csv.DictReader(file, skipinitialspace=True)
                
                for row in reader:
                    if row['NOME_JANELA'].strip() == self.window_name:
                        # Encontrou a configura√ß√£o para esta janela
                        x = int(row['X'])
                        y = int(row['Y'])
                        width = int(row['LARGURA'])
                        height = int(row['ALTURA'])
                        
                        # Define a geometria da janela
                        self.setGeometry(x, y, width, height)
                        self.logger.info(f"Janela {self.window_name} posicionada em ({x},{y}) {width}x{height}")
                        return
                
            # N√£o encontrou configura√ß√£o, usa padr√£o
            self.resize(450, 350)
            self.logger.info(f"Configura√ß√£o n√£o encontrada para {self.window_name}, usando padr√£o")
            
        except Exception as e:
            self.logger.warning(f"Erro ao carregar posi√ß√£o da janela {self.window_name}: {e}")
            self.resize(450, 350)  # Fallback para padr√£o

    def _show_config_dialog(self):
        """Exibe di√°logo de configura√ß√£o."""
        dialog = CaptureRegionConfigDialog(self.regions, self.manager, self)
        if dialog.exec() == dialog.DialogCode.Accepted:  # Atualizado em: 2024-12-28 ‚Äî PyQt6 moveu constantes para DialogCode
            # Atualizar regi√µes se necess√°rio
            self.logger.info(f"Configura√ß√£o atualizada para janela {self.window_name}")

    def _toggle_always_on_top(self):
        """Alterna modo 'sempre no topo'."""
        if self.always_on_top_btn.isChecked():
            self.setWindowFlags(self.windowFlags() | Qt.WindowType.WindowStaysOnTopHint)  # Atualizado em: 2024-12-28 ‚Äî PyQt6 moveu constantes para WindowType
            self.always_on_top_btn.setToolTip("Desabilitar sempre no topo")
        else:
            self.setWindowFlags(self.windowFlags() & ~Qt.WindowType.WindowStaysOnTopHint)  # Atualizado em: 2024-12-28 ‚Äî PyQt6 moveu constantes para WindowType
            self.always_on_top_btn.setToolTip("Sempre no topo")
        
        self.show()  # Necess√°rio para aplicar mudan√ßas de flags

    def update_captures(self):
        """
        Atualiza todas as capturas de tela desta janela.
        
        Captura cada regi√£o configurada e atualiza os widgets correspondentes.
        """
        app = QApplication.instance()
        screens = app.screens()
        
        for i, (region, widget) in enumerate(zip(self.regions, self.display_widgets)):
            try:
                # Captura a regi√£o espec√≠fica
                if region.display_id - 1 >= len(screens):
                    self.logger.error(f"Display {region.display_id} n√£o existe")
                    continue
                    
                screen = screens[region.display_id - 1]  # 0-indexed
                
                # CORRIGIDO: N√£o precisa ajustar para coordenadas globais
                # O grabWindow de um screen espec√≠fico j√° espera coordenadas relativas √†quele screen
                # As coordenadas X1,Y1 do CSV j√° s√£o relativas ao display espec√≠fico
                
                # Captura a tela usando coordenadas RELATIVAS ao monitor
                pixmap = screen.grabWindow(0, region.x1, region.y1, 
                                         region.width, region.height)
                
                # Para depura√ß√£o: registra as coordenadas e dimens√µes usadas
                self.logger.debug(f"Captura em Display {region.display_id}: ({region.x1},{region.y1}) "
                               f"tamanho {region.width}x{region.height}")
                
                widget.set_capture(pixmap)
                
            except Exception as e:
                self.logger.error(f"Erro ao capturar regi√£o {i}: {e}")

    def closeEvent(self, event):
        """Trata o fechamento da janela."""
        self.logger.info(f"Fechando janela de captura: {self.window_name}")
        event.accept()
